{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "250a674c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "class Preprocessor:\n",
    "\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def fit(self, X, Y=None):\n",
    "        pass\n",
    "\n",
    "    def transform(self, X):\n",
    "        pass\n",
    "\n",
    "    def fit_transform(self, X, Y=None):\n",
    "        pass\n",
    "\n",
    "\n",
    "class MyOneHotEncoder(Preprocessor):\n",
    "\n",
    "    def __init__(self, dtype=np.float64):\n",
    "        super(Preprocessor).__init__()\n",
    "        self.dtype = dtype\n",
    "\n",
    "    def fit(self, X, Y=None):\n",
    "        self.u_cols = []\n",
    "        self.len_u_cols = []\n",
    "        for col in X:\n",
    "            self.u_cols.append(sorted(X[col].unique()))\n",
    "            self.len_u_cols.append(len(X[col].unique()))\n",
    "        \"\"\"\n",
    "        param X: training objects, pandas-dataframe, shape [n_objects, n_features]\n",
    "        param Y: unused\n",
    "        \"\"\"\n",
    "\n",
    "    def transform(self, X):\n",
    "        result = np.zeros((X.shape[0], sum(self.len_u_cols))\n",
    "        for row in range(X.shape[0]):\n",
    "            temp = 0\n",
    "            for i in range(len(self.u_cols)):\n",
    "                for j in range(self.len_u_cols[i]):\n",
    "                    if X.iloc[row][X.columns[i]] == self.u_cols[i][j]:\n",
    "                        result[row][temp + j] = 1\n",
    "                        break\n",
    "                temp += self.len_u_cols[i]\n",
    "        return result\n",
    "        \"\"\"\n",
    "        param X: objects to transform, pandas-dataframe, shape [n_objects, n_features]\n",
    "        returns: transformed objects, numpy-array, shape [n_objects, |f1| + |f2| + ...]\n",
    "        \"\"\"\n",
    "\n",
    "    def fit_transform(self, X, Y=None):\n",
    "        self.fit(X)\n",
    "        return self.transform(X)\n",
    "\n",
    "    def get_params(self, deep=True):\n",
    "        return {\"dtype\": self.dtype}\n",
    "\n",
    "\n",
    "class SimpleCounterEncoder:\n",
    "\n",
    "    def __init__(self, dtype=np.float64):\n",
    "        self.dtype = dtype\n",
    "\n",
    "    def fit(self, X, Y):\n",
    "        self.arr = []\n",
    "        for i in X.columns:\n",
    "            temp_dict = {}\n",
    "            temp_name = X[i]\n",
    "            for j in X[i].unique():\n",
    "                temp_dict[j] = (np.mean(Y[temp_name == j]), len(Y[temp_name == j]) / len(Y))\n",
    "            self.arr.append(temp_dict)            \n",
    "        \"\"\"\n",
    "        param X: training objects, pandas-dataframe, shape [n_objects, n_features]\n",
    "        param Y: target for training objects, pandas-series, shape [n_objects,]\n",
    "        \"\"\"\n",
    "\n",
    "    def transform(self, X, a=1e-5, b=1e-5):\n",
    "        \"\"\"\n",
    "        param X: objects to transform, pandas-dataframe, shape [n_objects, n_features]\n",
    "        param a: constant for counters, float\n",
    "        param b: constant for counters, float\n",
    "        returns: transformed objects, numpy-array, shape [n_objects, 3]\n",
    "        \"\"\"\n",
    "        result = np.zeros((X.shape[0], X.shape[0] * 3), dtype=self.dtype)\n",
    "        cols = list(X.columns)\n",
    "        for i in range(len(cols)):\n",
    "            for key, value in self.arr[i].items():\n",
    "                result[X[cols[i]] == key, 3 * i] = value[0]\n",
    "                result[X[cols[i]] == key, 3 * i + 1] = value[1]\n",
    "                result[X[cols[i]] == key, 3 * i + 2] = (value[0] + a) / (value[1] + b)\n",
    "        return result\n",
    "\n",
    "    def fit_transform(self, X, Y, a=1e-5, b=1e-5):\n",
    "        self.fit(X, Y)\n",
    "        return self.transform(X, a, b)\n",
    "\n",
    "    def get_params(self, deep=True):\n",
    "        return {\"dtype\": self.dtype}\n",
    "\n",
    "\n",
    "def group_k_fold(size, n_splits=3, seed=1):\n",
    "    idx = np.arange(size)\n",
    "    np.random.seed(seed)\n",
    "    idx = np.random.permutation(idx)\n",
    "    n_ = size // n_splits\n",
    "    for i in range(n_splits - 1):\n",
    "        yield idx[i * n_: (i + 1) * n_], np.hstack((idx[:i * n_], idx[(i + 1) * n_:]))\n",
    "    yield idx[(n_splits - 1) * n_:], idx[:(n_splits - 1) * n_]\n",
    "\n",
    "\n",
    "class FoldCounters:\n",
    "\n",
    "    def __init__(self, n_folds=3, dtype=np.float64):\n",
    "        self.dtype = dtype\n",
    "        self.n_folds = n_folds\n",
    "\n",
    "    def fit(self, X, Y, seed=1):\n",
    "        \"\"\"\n",
    "        param X: training objects, pandas-dataframe, shape [n_objects, n_features]\n",
    "        param Y: target for training objects, pandas-series, shape [n_objects,]\n",
    "        param seed: random seed, int\n",
    "        \"\"\"\n",
    "        # your code here\n",
    "\n",
    "    def transform(self, X, a=1e-5, b=1e-5):\n",
    "        \"\"\"\n",
    "        param X: objects to transform, pandas-dataframe, shape [n_objects, n_features]\n",
    "        param a: constant for counters, float\n",
    "        param b: constant for counters, float\n",
    "        returns: transformed objects, numpy-array, shape [n_objects, 3]\n",
    "        \"\"\"\n",
    "        # your code here\n",
    "\n",
    "    def fit_transform(self, X, Y, a=1e-5, b=1e-5):\n",
    "        self.fit(X, Y)\n",
    "        return self.transform(X, a, b)\n",
    "\n",
    "\n",
    "def weights(x, y):\n",
    "    result = np.zeros(len(np.unique(x)))\n",
    "    for i in range(len(np.unique(x))):\n",
    "        if len(y[x == np.unique(x)[i]]) == sum(y[x == np.unique(x)[i]]):\n",
    "            result[i] = 1\n",
    "        elif sum(y[x == np.unique(x)[i]]) == 0:\n",
    "            result[i] = 0\n",
    "        else:\n",
    "            result[i] = sum(y[x == np.unique(x)[i]]) / (len(y[x == np.unique(x)[i]]))\n",
    "    return result                    \n",
    "    \"\"\"\n",
    "    param x: training set of one feature, numpy-array, shape [n_objects,]\n",
    "    param y: target for training objects, numpy-array, shape [n_objects,]\n",
    "    returns: optimal weights, numpy-array, shape [|x unique values|,]\n",
    "    \"\"\"\n",
    "    # your code here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fc34c689",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   one     two               three\n",
      "0    1   Sally             Builder\n",
      "1    2   Sally               Baker\n",
      "2    3   Scott  Candle Stick Maker\n",
      "3    1  Medium              Medium\n",
      "______\n",
      "[[1, 2, 3], ['Medium', 'Sally', 'Scott'], ['Baker', 'Builder', 'Candle Stick Maker', 'Medium']]\n",
      "[3, 3, 4]\n",
      "4\n",
      "two\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "data = [[1,'Sally', 'Builder'], [2,'Sally', 'Baker'], [3,'Scott', 'Candle Stick Maker'], [1, 'Medium', 'Medium']]\n",
    "columns = ['one', 'two', 'three']\n",
    "df = pd.DataFrame(data = data, columns = columns)\n",
    "print(df)\n",
    "print('______')\n",
    "un = []\n",
    "len_un = []\n",
    "for i in df.columns:\n",
    "    un.append(sorted(df[i].unique()))\n",
    "    len_un.append(len(df[i].unique()))\n",
    "print(un)\n",
    "print(len_un)\n",
    "print(df.shape[0])\n",
    "print(df.columns[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f90a4602",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
